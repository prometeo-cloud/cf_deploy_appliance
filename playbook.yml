# Ansible playbook that uses appliance_console_cli, plus existing
# Ansible modules, to provision a freshly deployed CloudForms appliance.
#

# this play performs initial sysadmin for newly created CFME appliances
# we set a non-default root password, install a public key for ansible,
# subscribe to the Red Hat customer portal, and update packages.
- hosts: all
  vars:
    ansible_ssh_pass: "{{ cfme_default_root_pw }}"

  tasks:
    # for an explanation of what the below does, see https://v-punk.com/automate-password-changes-with-ansible/
    # in a nutshell, this attempts to generate the same crypted password hash on the same host for the same input
    # text. Otherwise, password_hash() will use a random salt that changes each time, and we lose idempotency.
    # you could always crypt the root password yourself, then store the crypted value in cfme_root_pw. up to you! :)
    - name: set root password
      user: 
        name: root 
        password: "{{ cfme_new_root_pw|password_hash('sha512', 65534|random(seed=inventory_hostname)|string) }}"

# once the root password has changed we begin a new play
# we do this so we can change the SSH password that ansible is using.
#
# if you've got a public key installed, you could use that instead with ansible-playbook --key-file=...
- hosts: all
  vars:
    ansible_ssh_pass: "{{ cfme_new_root_pw }}"

  tasks:
    # we assume that static network configuration, if that's what you want,
    # has already been set.

    # set the appliance hostname. we could do this with appliance_console_cli --host, but
    # we don't get the same idempotency as using the module. where ansible modules work, use
    # them.
    - name: set hostname
      shell: >
        appliance_console_cli
        --host="{{ inventory_hostname }}"
      when: inventory_hostname != ansible_fqdn
      tags:
        - set_host

    # if you have a CloudForms subscription, connect to it
    # if not, make sure subscribe_to_rhn is set to false or is otherwise undefined.
    - name: register red hat subscription
      redhat_subscription:
        state: present
        username: "{{ rhn_user }}"  # in the vault
        password: "{{ rhn_pass }}"  # in the vault
        autosubscribe: true
      tags:
        - rhn
        
    # latest and greatest! 
    - name: update all packages
      yum: name=* state=latest
      tags:
        - updates



# the next tasks only execute on an appliance that will be the primary
# database. for an all-in-one appliance it will be its own primary db.
# note: you don't want more than one primary database! running in a multi-master
# configuration for postgres isn't supported.
- hosts: primary_db
  vars:
    ansible_ssh_pass: "{{ cfme_new_root_pw }}"

  tasks:
    - name: configure primary database and region
      shell: >
        appliance_console_cli 
        --internal
        --username={{ cfme_db_user }}
        --password={{ cfme_db_pass }}
        --region={{ cfme_region }}
        {{ ( '--dbdisk=' + cfme_db_disk ) if cfme_db_disk else '' }}
      args:
        chdir: /var/www/miq/vmdb
        creates: config/database.yml





# these plays are designed for hosts that join the database remotely
# we don't need to join an external region, or fetch a remote encryption
# key, if we're building an 'all-in-one' appliance. 
- hosts: appliances
  vars:
    ansible_ssh_pass: "{{ cfme_new_root_pw }}"

  tasks:
    - name: configure appliance for remote database
      block:
      - set_fact: primary_ip={{ hostvars[groups['primary_db'][0]]['ansible_eth0']['ipv4']['address'] }}

      - name: fetch remote encryption key
        shell: >
          appliance_console_cli
          --fetch-key={{ primary_ip }}
          --sshlogin=root
          --sshpassword="{{ cfme_default_root_pw }}"

      - name: connect to external region in database
        shell: >
          appliance_console_cli
          --hostname={{ primary_ip }}
          --username={{ cfme_db_user }}
          --password={{ cfme_db_pass }}

        args:
          chdir: /var/www/miq/vmdb
          creates: REGION
      when: not cfme_appliance_allinone is defined

    - name: start evmserverd
      service:
        name: evmserverd
        state: started
